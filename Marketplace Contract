//Marketplace Contract

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";

contract MyMarketplace is AccessControl, ReentrancyGuard, ERC721Holder {
    using EnumerableSet for EnumerableSet.UintSet;
    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    Counters.Counter private _auctionIdCounter;

    struct Auction {
        address seller;
        uint256 startPrice;
        uint256 duration;
        uint256 endTime;
        address highestBidder;
        uint256 highestBid;
        bool ended;
    }

    mapping(uint256 => Auction) public auctions;
    mapping(uint256 => uint256) public fixedPriceListings;
    mapping(uint256 => EnumerableSet.AddressSet) private bidders;

    IERC721 public nftContract;

    event AuctionCreated(uint256 indexed auctionId, uint256 indexed tokenId, address indexed seller, uint256 startPrice, uint256 duration);
    event BidPlaced(uint256 indexed auctionId, address indexed bidder, uint256 amount);
    event AuctionEnded(uint256 indexed auctionId, address indexed winner, uint256 amount);

    constructor(address _nftAddress) {
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(MINTER_ROLE, msg.sender);
        nftContract = IERC721(_nftAddress);
    }

    function createFixedPriceListing(uint256 tokenId, uint256 price) external {
        require(nftContract.ownerOf(tokenId) == msg.sender, "Not token owner");
        fixedPriceListings[tokenId] = price;
    }

    function createAuctionListing(uint256 tokenId, uint256 startPrice, uint256 duration) external {
        require(nftContract.ownerOf(tokenId) == msg.sender, "Not token owner");
        uint256 auctionId = _auctionIdCounter.current();
        auctions[auctionId] = Auction({
            seller: msg.sender,
            startPrice: startPrice,
            duration: duration,
            endTime: block.timestamp + duration,
            highestBidder: address(0),
            highestBid: 0,
            ended: false
        });
        _auctionIdCounter.increment();
        emit AuctionCreated(auctionId, tokenId, msg.sender, startPrice, duration);
    }

    function placeBid(uint256 auctionId) external payable nonReentrant {
        Auction storage auction = auctions[auctionId];
        require(block.timestamp < auction.endTime, "Auction ended");
        require(msg.value > auction.highestBid, "Bid too low");
        if (auction.highestBidder != address(0)) {
            payable(auction.highestBidder).transfer(auction.highestBid);
        }
        auction.highestBidder = msg.sender;
        auction.highestBid = msg.value;
        bidders[auctionId].add(msg.sender);
        emit BidPlaced(auctionId, msg.sender, msg.value);
    }

    function endAuction(uint256 auctionId) external nonReentrant {
        Auction storage auction = auctions[auctionId];
        require(!auction.ended, "Auction already ended");
        require(block.timestamp >= auction.endTime, "Auction not yet ended");
        auction.ended = true;
        if (auction.highestBidder != address(0)) {
            nftContract.safeTransferFrom(auction.seller, auction.highestBidder, auctionId);
            payable(auction.seller).transfer(auction.highestBid);
            emit AuctionEnded(auctionId, auction.highestBidder, auction.highestBid);
        }
    }

    function getBidders(uint256 auctionId) external view returns (address[] memory) {
        return bidders[auctionId].values();
    }

    // Other functions for retrieving data

    // Upgradeable contracts setup...
}

